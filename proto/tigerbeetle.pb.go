// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: proto/tigerbeetle.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAccountResult int32

const (
	CreateAccountResult_AccountOK                                   CreateAccountResult = 0
	CreateAccountResult_AccountLinkedEventFailed                    CreateAccountResult = 1
	CreateAccountResult_AccountLinkedEventChainOpen                 CreateAccountResult = 2
	CreateAccountResult_AccountImportedEventExpected                CreateAccountResult = 22
	CreateAccountResult_AccountImportedEventNotExpected             CreateAccountResult = 23
	CreateAccountResult_AccountTimestampMustBeZero                  CreateAccountResult = 3
	CreateAccountResult_AccountImportedEventTimestampOutOfRange     CreateAccountResult = 24
	CreateAccountResult_AccountImportedEventTimestampMustNotAdvance CreateAccountResult = 25
	CreateAccountResult_AccountReservedField                        CreateAccountResult = 4
	CreateAccountResult_AccountReservedFlag                         CreateAccountResult = 5
	CreateAccountResult_AccountIDMustNotBeZero                      CreateAccountResult = 6
	CreateAccountResult_AccountIDMustNotBeIntMax                    CreateAccountResult = 7
	CreateAccountResult_AccountExistsWithDifferentFlags             CreateAccountResult = 15
	CreateAccountResult_AccountExistsWithDifferentUserData128       CreateAccountResult = 16
	CreateAccountResult_AccountExistsWithDifferentUserData64        CreateAccountResult = 17
	CreateAccountResult_AccountExistsWithDifferentUserData32        CreateAccountResult = 18
	CreateAccountResult_AccountExistsWithDifferentLedger            CreateAccountResult = 19
	CreateAccountResult_AccountExistsWithDifferentCode              CreateAccountResult = 20
	CreateAccountResult_AccountExists                               CreateAccountResult = 21
	CreateAccountResult_AccountFlagsAreMutuallyExclusive            CreateAccountResult = 8
	CreateAccountResult_AccountDebitsPendingMustBeZero              CreateAccountResult = 9
	CreateAccountResult_AccountDebitsPostedMustBeZero               CreateAccountResult = 10
	CreateAccountResult_AccountCreditsPendingMustBeZero             CreateAccountResult = 11
	CreateAccountResult_AccountCreditsPostedMustBeZero              CreateAccountResult = 12
	CreateAccountResult_AccountLedgerMustNotBeZero                  CreateAccountResult = 13
	CreateAccountResult_AccountCodeMustNotBeZero                    CreateAccountResult = 14
	CreateAccountResult_AccountImportedEventTimestampMustNotRegress CreateAccountResult = 26
)

// Enum value maps for CreateAccountResult.
var (
	CreateAccountResult_name = map[int32]string{
		0:  "AccountOK",
		1:  "AccountLinkedEventFailed",
		2:  "AccountLinkedEventChainOpen",
		22: "AccountImportedEventExpected",
		23: "AccountImportedEventNotExpected",
		3:  "AccountTimestampMustBeZero",
		24: "AccountImportedEventTimestampOutOfRange",
		25: "AccountImportedEventTimestampMustNotAdvance",
		4:  "AccountReservedField",
		5:  "AccountReservedFlag",
		6:  "AccountIDMustNotBeZero",
		7:  "AccountIDMustNotBeIntMax",
		15: "AccountExistsWithDifferentFlags",
		16: "AccountExistsWithDifferentUserData128",
		17: "AccountExistsWithDifferentUserData64",
		18: "AccountExistsWithDifferentUserData32",
		19: "AccountExistsWithDifferentLedger",
		20: "AccountExistsWithDifferentCode",
		21: "AccountExists",
		8:  "AccountFlagsAreMutuallyExclusive",
		9:  "AccountDebitsPendingMustBeZero",
		10: "AccountDebitsPostedMustBeZero",
		11: "AccountCreditsPendingMustBeZero",
		12: "AccountCreditsPostedMustBeZero",
		13: "AccountLedgerMustNotBeZero",
		14: "AccountCodeMustNotBeZero",
		26: "AccountImportedEventTimestampMustNotRegress",
	}
	CreateAccountResult_value = map[string]int32{
		"AccountOK":                                   0,
		"AccountLinkedEventFailed":                    1,
		"AccountLinkedEventChainOpen":                 2,
		"AccountImportedEventExpected":                22,
		"AccountImportedEventNotExpected":             23,
		"AccountTimestampMustBeZero":                  3,
		"AccountImportedEventTimestampOutOfRange":     24,
		"AccountImportedEventTimestampMustNotAdvance": 25,
		"AccountReservedField":                        4,
		"AccountReservedFlag":                         5,
		"AccountIDMustNotBeZero":                      6,
		"AccountIDMustNotBeIntMax":                    7,
		"AccountExistsWithDifferentFlags":             15,
		"AccountExistsWithDifferentUserData128":       16,
		"AccountExistsWithDifferentUserData64":        17,
		"AccountExistsWithDifferentUserData32":        18,
		"AccountExistsWithDifferentLedger":            19,
		"AccountExistsWithDifferentCode":              20,
		"AccountExists":                               21,
		"AccountFlagsAreMutuallyExclusive":            8,
		"AccountDebitsPendingMustBeZero":              9,
		"AccountDebitsPostedMustBeZero":               10,
		"AccountCreditsPendingMustBeZero":             11,
		"AccountCreditsPostedMustBeZero":              12,
		"AccountLedgerMustNotBeZero":                  13,
		"AccountCodeMustNotBeZero":                    14,
		"AccountImportedEventTimestampMustNotRegress": 26,
	}
)

func (x CreateAccountResult) Enum() *CreateAccountResult {
	p := new(CreateAccountResult)
	*p = x
	return p
}

func (x CreateAccountResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateAccountResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tigerbeetle_proto_enumTypes[0].Descriptor()
}

func (CreateAccountResult) Type() protoreflect.EnumType {
	return &file_proto_tigerbeetle_proto_enumTypes[0]
}

func (x CreateAccountResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateAccountResult.Descriptor instead.
func (CreateAccountResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{0}
}

type CreateTransferResult int32

const (
	CreateTransferResult_TransferOK                                              CreateTransferResult = 0
	CreateTransferResult_TransferLinkedEventFailed                               CreateTransferResult = 1
	CreateTransferResult_TransferLinkedEventChainOpen                            CreateTransferResult = 2
	CreateTransferResult_TransferImportedEventExpected                           CreateTransferResult = 56
	CreateTransferResult_TransferImportedEventNotExpected                        CreateTransferResult = 57
	CreateTransferResult_TransferTimestampMustBeZero                             CreateTransferResult = 3
	CreateTransferResult_TransferImportedEventTimestampOutOfRange                CreateTransferResult = 58
	CreateTransferResult_TransferImportedEventTimestampMustNotAdvance            CreateTransferResult = 59
	CreateTransferResult_TransferReservedFlag                                    CreateTransferResult = 4
	CreateTransferResult_TransferIDMustNotBeZero                                 CreateTransferResult = 5
	CreateTransferResult_TransferIDMustNotBeIntMax                               CreateTransferResult = 6
	CreateTransferResult_TransferExistsWithDifferentFlags                        CreateTransferResult = 36
	CreateTransferResult_TransferExistsWithDifferentPendingID                    CreateTransferResult = 40
	CreateTransferResult_TransferExistsWithDifferentTimeout                      CreateTransferResult = 44
	CreateTransferResult_TransferExistsWithDifferentDebitAccountID               CreateTransferResult = 37
	CreateTransferResult_TransferExistsWithDifferentCreditAccountID              CreateTransferResult = 38
	CreateTransferResult_TransferExistsWithDifferentAmount                       CreateTransferResult = 39
	CreateTransferResult_TransferExistsWithDifferentUserData128                  CreateTransferResult = 41
	CreateTransferResult_TransferExistsWithDifferentUserData64                   CreateTransferResult = 42
	CreateTransferResult_TransferExistsWithDifferentUserData32                   CreateTransferResult = 43
	CreateTransferResult_TransferExistsWithDifferentLedger                       CreateTransferResult = 67
	CreateTransferResult_TransferExistsWithDifferentCode                         CreateTransferResult = 45
	CreateTransferResult_TransferExists                                          CreateTransferResult = 46
	CreateTransferResult_TransferIDAlreadyFailed                                 CreateTransferResult = 68
	CreateTransferResult_TransferFlagsAreMutuallyExclusive                       CreateTransferResult = 7
	CreateTransferResult_TransferDebitAccountIDMustNotBeZero                     CreateTransferResult = 8
	CreateTransferResult_TransferDebitAccountIDMustNotBeIntMax                   CreateTransferResult = 9
	CreateTransferResult_TransferCreditAccountIDMustNotBeZero                    CreateTransferResult = 10
	CreateTransferResult_TransferCreditAccountIDMustNotBeIntMax                  CreateTransferResult = 11
	CreateTransferResult_TransferAccountsMustBeDifferent                         CreateTransferResult = 12
	CreateTransferResult_TransferPendingIDMustBeZero                             CreateTransferResult = 13
	CreateTransferResult_TransferPendingIDMustNotBeZero                          CreateTransferResult = 14
	CreateTransferResult_TransferPendingIDMustNotBeIntMax                        CreateTransferResult = 15
	CreateTransferResult_TransferPendingIDMustBeDifferent                        CreateTransferResult = 16
	CreateTransferResult_TransferTimeoutReservedForPendingTransfer               CreateTransferResult = 17
	CreateTransferResult_TransferClosingTransferMustBePending                    CreateTransferResult = 64
	CreateTransferResult_TransferAmountMustNotBeZero                             CreateTransferResult = 18
	CreateTransferResult_TransferLedgerMustNotBeZero                             CreateTransferResult = 19
	CreateTransferResult_TransferCodeMustNotBeZero                               CreateTransferResult = 20
	CreateTransferResult_TransferDebitAccountNotFound                            CreateTransferResult = 21
	CreateTransferResult_TransferCreditAccountNotFound                           CreateTransferResult = 22
	CreateTransferResult_TransferAccountsMustHaveTheSameLedger                   CreateTransferResult = 23
	CreateTransferResult_TransferTransferMustHaveTheSameLedgerAsAccounts         CreateTransferResult = 24
	CreateTransferResult_TransferPendingTransferNotFound                         CreateTransferResult = 25
	CreateTransferResult_TransferPendingTransferNotPending                       CreateTransferResult = 26
	CreateTransferResult_TransferPendingTransferHasDifferentDebitAccountID       CreateTransferResult = 27
	CreateTransferResult_TransferPendingTransferHasDifferentCreditAccountID      CreateTransferResult = 28
	CreateTransferResult_TransferPendingTransferHasDifferentLedger               CreateTransferResult = 29
	CreateTransferResult_TransferPendingTransferHasDifferentCode                 CreateTransferResult = 30
	CreateTransferResult_TransferExceedsPendingTransferAmount                    CreateTransferResult = 31
	CreateTransferResult_TransferPendingTransferHasDifferentAmount               CreateTransferResult = 32
	CreateTransferResult_TransferPendingTransferAlreadyPosted                    CreateTransferResult = 33
	CreateTransferResult_TransferPendingTransferAlreadyVoided                    CreateTransferResult = 34
	CreateTransferResult_TransferPendingTransferExpired                          CreateTransferResult = 35
	CreateTransferResult_TransferImportedEventTimestampMustNotRegress            CreateTransferResult = 60
	CreateTransferResult_TransferImportedEventTimestampMustPostdateDebitAccount  CreateTransferResult = 61
	CreateTransferResult_TransferImportedEventTimestampMustPostdateCreditAccount CreateTransferResult = 62
	CreateTransferResult_TransferImportedEventTimeoutMustBeZero                  CreateTransferResult = 63
	CreateTransferResult_TransferDebitAccountAlreadyClosed                       CreateTransferResult = 65
	CreateTransferResult_TransferCreditAccountAlreadyClosed                      CreateTransferResult = 66
	CreateTransferResult_TransferOverflowsDebitsPending                          CreateTransferResult = 47
	CreateTransferResult_TransferOverflowsCreditsPending                         CreateTransferResult = 48
	CreateTransferResult_TransferOverflowsDebitsPosted                           CreateTransferResult = 49
	CreateTransferResult_TransferOverflowsCreditsPosted                          CreateTransferResult = 50
	CreateTransferResult_TransferOverflowsDebits                                 CreateTransferResult = 51
	CreateTransferResult_TransferOverflowsCredits                                CreateTransferResult = 52
	CreateTransferResult_TransferOverflowsTimeout                                CreateTransferResult = 53
	CreateTransferResult_TransferExceedsCredits                                  CreateTransferResult = 54
	CreateTransferResult_TransferExceedsDebits                                   CreateTransferResult = 55
)

// Enum value maps for CreateTransferResult.
var (
	CreateTransferResult_name = map[int32]string{
		0:  "TransferOK",
		1:  "TransferLinkedEventFailed",
		2:  "TransferLinkedEventChainOpen",
		56: "TransferImportedEventExpected",
		57: "TransferImportedEventNotExpected",
		3:  "TransferTimestampMustBeZero",
		58: "TransferImportedEventTimestampOutOfRange",
		59: "TransferImportedEventTimestampMustNotAdvance",
		4:  "TransferReservedFlag",
		5:  "TransferIDMustNotBeZero",
		6:  "TransferIDMustNotBeIntMax",
		36: "TransferExistsWithDifferentFlags",
		40: "TransferExistsWithDifferentPendingID",
		44: "TransferExistsWithDifferentTimeout",
		37: "TransferExistsWithDifferentDebitAccountID",
		38: "TransferExistsWithDifferentCreditAccountID",
		39: "TransferExistsWithDifferentAmount",
		41: "TransferExistsWithDifferentUserData128",
		42: "TransferExistsWithDifferentUserData64",
		43: "TransferExistsWithDifferentUserData32",
		67: "TransferExistsWithDifferentLedger",
		45: "TransferExistsWithDifferentCode",
		46: "TransferExists",
		68: "TransferIDAlreadyFailed",
		7:  "TransferFlagsAreMutuallyExclusive",
		8:  "TransferDebitAccountIDMustNotBeZero",
		9:  "TransferDebitAccountIDMustNotBeIntMax",
		10: "TransferCreditAccountIDMustNotBeZero",
		11: "TransferCreditAccountIDMustNotBeIntMax",
		12: "TransferAccountsMustBeDifferent",
		13: "TransferPendingIDMustBeZero",
		14: "TransferPendingIDMustNotBeZero",
		15: "TransferPendingIDMustNotBeIntMax",
		16: "TransferPendingIDMustBeDifferent",
		17: "TransferTimeoutReservedForPendingTransfer",
		64: "TransferClosingTransferMustBePending",
		18: "TransferAmountMustNotBeZero",
		19: "TransferLedgerMustNotBeZero",
		20: "TransferCodeMustNotBeZero",
		21: "TransferDebitAccountNotFound",
		22: "TransferCreditAccountNotFound",
		23: "TransferAccountsMustHaveTheSameLedger",
		24: "TransferTransferMustHaveTheSameLedgerAsAccounts",
		25: "TransferPendingTransferNotFound",
		26: "TransferPendingTransferNotPending",
		27: "TransferPendingTransferHasDifferentDebitAccountID",
		28: "TransferPendingTransferHasDifferentCreditAccountID",
		29: "TransferPendingTransferHasDifferentLedger",
		30: "TransferPendingTransferHasDifferentCode",
		31: "TransferExceedsPendingTransferAmount",
		32: "TransferPendingTransferHasDifferentAmount",
		33: "TransferPendingTransferAlreadyPosted",
		34: "TransferPendingTransferAlreadyVoided",
		35: "TransferPendingTransferExpired",
		60: "TransferImportedEventTimestampMustNotRegress",
		61: "TransferImportedEventTimestampMustPostdateDebitAccount",
		62: "TransferImportedEventTimestampMustPostdateCreditAccount",
		63: "TransferImportedEventTimeoutMustBeZero",
		65: "TransferDebitAccountAlreadyClosed",
		66: "TransferCreditAccountAlreadyClosed",
		47: "TransferOverflowsDebitsPending",
		48: "TransferOverflowsCreditsPending",
		49: "TransferOverflowsDebitsPosted",
		50: "TransferOverflowsCreditsPosted",
		51: "TransferOverflowsDebits",
		52: "TransferOverflowsCredits",
		53: "TransferOverflowsTimeout",
		54: "TransferExceedsCredits",
		55: "TransferExceedsDebits",
	}
	CreateTransferResult_value = map[string]int32{
		"TransferOK":                                              0,
		"TransferLinkedEventFailed":                               1,
		"TransferLinkedEventChainOpen":                            2,
		"TransferImportedEventExpected":                           56,
		"TransferImportedEventNotExpected":                        57,
		"TransferTimestampMustBeZero":                             3,
		"TransferImportedEventTimestampOutOfRange":                58,
		"TransferImportedEventTimestampMustNotAdvance":            59,
		"TransferReservedFlag":                                    4,
		"TransferIDMustNotBeZero":                                 5,
		"TransferIDMustNotBeIntMax":                               6,
		"TransferExistsWithDifferentFlags":                        36,
		"TransferExistsWithDifferentPendingID":                    40,
		"TransferExistsWithDifferentTimeout":                      44,
		"TransferExistsWithDifferentDebitAccountID":               37,
		"TransferExistsWithDifferentCreditAccountID":              38,
		"TransferExistsWithDifferentAmount":                       39,
		"TransferExistsWithDifferentUserData128":                  41,
		"TransferExistsWithDifferentUserData64":                   42,
		"TransferExistsWithDifferentUserData32":                   43,
		"TransferExistsWithDifferentLedger":                       67,
		"TransferExistsWithDifferentCode":                         45,
		"TransferExists":                                          46,
		"TransferIDAlreadyFailed":                                 68,
		"TransferFlagsAreMutuallyExclusive":                       7,
		"TransferDebitAccountIDMustNotBeZero":                     8,
		"TransferDebitAccountIDMustNotBeIntMax":                   9,
		"TransferCreditAccountIDMustNotBeZero":                    10,
		"TransferCreditAccountIDMustNotBeIntMax":                  11,
		"TransferAccountsMustBeDifferent":                         12,
		"TransferPendingIDMustBeZero":                             13,
		"TransferPendingIDMustNotBeZero":                          14,
		"TransferPendingIDMustNotBeIntMax":                        15,
		"TransferPendingIDMustBeDifferent":                        16,
		"TransferTimeoutReservedForPendingTransfer":               17,
		"TransferClosingTransferMustBePending":                    64,
		"TransferAmountMustNotBeZero":                             18,
		"TransferLedgerMustNotBeZero":                             19,
		"TransferCodeMustNotBeZero":                               20,
		"TransferDebitAccountNotFound":                            21,
		"TransferCreditAccountNotFound":                           22,
		"TransferAccountsMustHaveTheSameLedger":                   23,
		"TransferTransferMustHaveTheSameLedgerAsAccounts":         24,
		"TransferPendingTransferNotFound":                         25,
		"TransferPendingTransferNotPending":                       26,
		"TransferPendingTransferHasDifferentDebitAccountID":       27,
		"TransferPendingTransferHasDifferentCreditAccountID":      28,
		"TransferPendingTransferHasDifferentLedger":               29,
		"TransferPendingTransferHasDifferentCode":                 30,
		"TransferExceedsPendingTransferAmount":                    31,
		"TransferPendingTransferHasDifferentAmount":               32,
		"TransferPendingTransferAlreadyPosted":                    33,
		"TransferPendingTransferAlreadyVoided":                    34,
		"TransferPendingTransferExpired":                          35,
		"TransferImportedEventTimestampMustNotRegress":            60,
		"TransferImportedEventTimestampMustPostdateDebitAccount":  61,
		"TransferImportedEventTimestampMustPostdateCreditAccount": 62,
		"TransferImportedEventTimeoutMustBeZero":                  63,
		"TransferDebitAccountAlreadyClosed":                       65,
		"TransferCreditAccountAlreadyClosed":                      66,
		"TransferOverflowsDebitsPending":                          47,
		"TransferOverflowsCreditsPending":                         48,
		"TransferOverflowsDebitsPosted":                           49,
		"TransferOverflowsCreditsPosted":                          50,
		"TransferOverflowsDebits":                                 51,
		"TransferOverflowsCredits":                                52,
		"TransferOverflowsTimeout":                                53,
		"TransferExceedsCredits":                                  54,
		"TransferExceedsDebits":                                   55,
	}
)

func (x CreateTransferResult) Enum() *CreateTransferResult {
	p := new(CreateTransferResult)
	*p = x
	return p
}

func (x CreateTransferResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTransferResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tigerbeetle_proto_enumTypes[1].Descriptor()
}

func (CreateTransferResult) Type() protoreflect.EnumType {
	return &file_proto_tigerbeetle_proto_enumTypes[1]
}

func (x CreateTransferResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateTransferResult.Descriptor instead.
func (CreateTransferResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{1}
}

type GetIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIDRequest) Reset() {
	*x = GetIDRequest{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIDRequest) ProtoMessage() {}

func (x *GetIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIDRequest.ProtoReflect.Descriptor instead.
func (*GetIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{0}
}

type GetIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIDReply) Reset() {
	*x = GetIDReply{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIDReply) ProtoMessage() {}

func (x *GetIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIDReply.ProtoReflect.Descriptor instead.
func (*GetIDReply) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{1}
}

func (x *GetIDReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *CreateAccountsRequest) Reset() {
	*x = CreateAccountsRequest{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountsRequest) ProtoMessage() {}

func (x *CreateAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountsRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAccountsRequest) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CreateAccountsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CreateAccountsReplyItem `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CreateAccountsReply) Reset() {
	*x = CreateAccountsReply{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountsReply) ProtoMessage() {}

func (x *CreateAccountsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountsReply.ProtoReflect.Descriptor instead.
func (*CreateAccountsReply) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAccountsReply) GetResults() []*CreateAccountsReplyItem {
	if x != nil {
		return x.Results
	}
	return nil
}

type CreateAccountsReplyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Result CreateAccountResult `protobuf:"varint,2,opt,name=result,proto3,enum=proto.CreateAccountResult" json:"result,omitempty"`
}

func (x *CreateAccountsReplyItem) Reset() {
	*x = CreateAccountsReplyItem{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountsReplyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountsReplyItem) ProtoMessage() {}

func (x *CreateAccountsReplyItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountsReplyItem.ProtoReflect.Descriptor instead.
func (*CreateAccountsReplyItem) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAccountsReplyItem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateAccountsReplyItem) GetResult() CreateAccountResult {
	if x != nil {
		return x.Result
	}
	return CreateAccountResult_AccountOK
}

type CreateTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *CreateTransfersRequest) Reset() {
	*x = CreateTransfersRequest{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransfersRequest) ProtoMessage() {}

func (x *CreateTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransfersRequest.ProtoReflect.Descriptor instead.
func (*CreateTransfersRequest) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTransfersRequest) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type CreateTransfersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CreateTransfersReplyItem `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CreateTransfersReply) Reset() {
	*x = CreateTransfersReply{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransfersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransfersReply) ProtoMessage() {}

func (x *CreateTransfersReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransfersReply.ProtoReflect.Descriptor instead.
func (*CreateTransfersReply) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTransfersReply) GetResults() []*CreateTransfersReplyItem {
	if x != nil {
		return x.Results
	}
	return nil
}

type CreateTransfersReplyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Result CreateTransferResult `protobuf:"varint,2,opt,name=result,proto3,enum=proto.CreateTransferResult" json:"result,omitempty"`
	Id     string               `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTransfersReplyItem) Reset() {
	*x = CreateTransfersReplyItem{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransfersReplyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransfersReplyItem) ProtoMessage() {}

func (x *CreateTransfersReplyItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransfersReplyItem.ProtoReflect.Descriptor instead.
func (*CreateTransfersReplyItem) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTransfersReplyItem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateTransfersReplyItem) GetResult() CreateTransferResult {
	if x != nil {
		return x.Result
	}
	return CreateTransferResult_TransferOK
}

func (x *CreateTransfersReplyItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LookupAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []string `protobuf:"bytes,1,rep,name=account_ids,json=accountIds,proto3" json:"account_ids,omitempty"`
}

func (x *LookupAccountsRequest) Reset() {
	*x = LookupAccountsRequest{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupAccountsRequest) ProtoMessage() {}

func (x *LookupAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupAccountsRequest.ProtoReflect.Descriptor instead.
func (*LookupAccountsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{8}
}

func (x *LookupAccountsRequest) GetAccountIds() []string {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type LookupAccountsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *LookupAccountsReply) Reset() {
	*x = LookupAccountsReply{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupAccountsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupAccountsReply) ProtoMessage() {}

func (x *LookupAccountsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupAccountsReply.ProtoReflect.Descriptor instead.
func (*LookupAccountsReply) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{9}
}

func (x *LookupAccountsReply) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type LookupTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferIds []string `protobuf:"bytes,1,rep,name=transfer_ids,json=transferIds,proto3" json:"transfer_ids,omitempty"`
}

func (x *LookupTransfersRequest) Reset() {
	*x = LookupTransfersRequest{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupTransfersRequest) ProtoMessage() {}

func (x *LookupTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupTransfersRequest.ProtoReflect.Descriptor instead.
func (*LookupTransfersRequest) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{10}
}

func (x *LookupTransfersRequest) GetTransferIds() []string {
	if x != nil {
		return x.TransferIds
	}
	return nil
}

type LookupTransfersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *LookupTransfersReply) Reset() {
	*x = LookupTransfersReply{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupTransfersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupTransfersReply) ProtoMessage() {}

func (x *LookupTransfersReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupTransfersReply.ProtoReflect.Descriptor instead.
func (*LookupTransfersReply) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{11}
}

func (x *LookupTransfersReply) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type GetAccountTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *AccountFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetAccountTransfersRequest) Reset() {
	*x = GetAccountTransfersRequest{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountTransfersRequest) ProtoMessage() {}

func (x *GetAccountTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountTransfersRequest.ProtoReflect.Descriptor instead.
func (*GetAccountTransfersRequest) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{12}
}

func (x *GetAccountTransfersRequest) GetFilter() *AccountFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetAccountTransfersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *GetAccountTransfersReply) Reset() {
	*x = GetAccountTransfersReply{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountTransfersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountTransfersReply) ProtoMessage() {}

func (x *GetAccountTransfersReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountTransfersReply.ProtoReflect.Descriptor instead.
func (*GetAccountTransfersReply) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{13}
}

func (x *GetAccountTransfersReply) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type GetAccountBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *AccountFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetAccountBalancesRequest) Reset() {
	*x = GetAccountBalancesRequest{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountBalancesRequest) ProtoMessage() {}

func (x *GetAccountBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountBalancesRequest.ProtoReflect.Descriptor instead.
func (*GetAccountBalancesRequest) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{14}
}

func (x *GetAccountBalancesRequest) GetFilter() *AccountFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetAccountBalancesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountBalances []*AccountBalance `protobuf:"bytes,1,rep,name=account_balances,json=accountBalances,proto3" json:"account_balances,omitempty"`
}

func (x *GetAccountBalancesReply) Reset() {
	*x = GetAccountBalancesReply{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountBalancesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountBalancesReply) ProtoMessage() {}

func (x *GetAccountBalancesReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountBalancesReply.ProtoReflect.Descriptor instead.
func (*GetAccountBalancesReply) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{15}
}

func (x *GetAccountBalancesReply) GetAccountBalances() []*AccountBalance {
	if x != nil {
		return x.AccountBalances
	}
	return nil
}

// Types
// ----------------------------------------------------------------
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DebitsPending  uint64        `protobuf:"varint,2,opt,name=debits_pending,json=debitsPending,proto3" json:"debits_pending,omitempty"`
	DebitsPosted   uint64        `protobuf:"varint,3,opt,name=debits_posted,json=debitsPosted,proto3" json:"debits_posted,omitempty"`
	CreditsPending uint64        `protobuf:"varint,4,opt,name=credits_pending,json=creditsPending,proto3" json:"credits_pending,omitempty"`
	CreditsPosted  uint64        `protobuf:"varint,5,opt,name=credits_posted,json=creditsPosted,proto3" json:"credits_posted,omitempty"`
	UserData128    string        `protobuf:"bytes,6,opt,name=user_data128,json=userData128,proto3" json:"user_data128,omitempty"`
	UserData64     uint64        `protobuf:"varint,7,opt,name=user_data64,json=userData64,proto3" json:"user_data64,omitempty"`
	UserData32     uint32        `protobuf:"varint,8,opt,name=user_data32,json=userData32,proto3" json:"user_data32,omitempty"`
	Ledger         uint32        `protobuf:"varint,9,opt,name=ledger,proto3" json:"ledger,omitempty"`
	Code           uint32        `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Flags          *AccountFlags `protobuf:"bytes,11,opt,name=flags,proto3" json:"flags,omitempty"`
	Timestamp      uint64        `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{16}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetDebitsPending() uint64 {
	if x != nil {
		return x.DebitsPending
	}
	return 0
}

func (x *Account) GetDebitsPosted() uint64 {
	if x != nil {
		return x.DebitsPosted
	}
	return 0
}

func (x *Account) GetCreditsPending() uint64 {
	if x != nil {
		return x.CreditsPending
	}
	return 0
}

func (x *Account) GetCreditsPosted() uint64 {
	if x != nil {
		return x.CreditsPosted
	}
	return 0
}

func (x *Account) GetUserData128() string {
	if x != nil {
		return x.UserData128
	}
	return ""
}

func (x *Account) GetUserData64() uint64 {
	if x != nil {
		return x.UserData64
	}
	return 0
}

func (x *Account) GetUserData32() uint32 {
	if x != nil {
		return x.UserData32
	}
	return 0
}

func (x *Account) GetLedger() uint32 {
	if x != nil {
		return x.Ledger
	}
	return 0
}

func (x *Account) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Account) GetFlags() *AccountFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Account) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type AccountFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Linked                     *bool `protobuf:"varint,1,opt,name=linked,proto3,oneof" json:"linked,omitempty"`
	DebitsMustNotExceedCredits *bool `protobuf:"varint,2,opt,name=debits_must_not_exceed_credits,json=debitsMustNotExceedCredits,proto3,oneof" json:"debits_must_not_exceed_credits,omitempty"`
	CreditsMustNotExceedDebits *bool `protobuf:"varint,3,opt,name=credits_must_not_exceed_debits,json=creditsMustNotExceedDebits,proto3,oneof" json:"credits_must_not_exceed_debits,omitempty"`
	History                    *bool `protobuf:"varint,4,opt,name=history,proto3,oneof" json:"history,omitempty"`
}

func (x *AccountFlags) Reset() {
	*x = AccountFlags{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFlags) ProtoMessage() {}

func (x *AccountFlags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFlags.ProtoReflect.Descriptor instead.
func (*AccountFlags) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{17}
}

func (x *AccountFlags) GetLinked() bool {
	if x != nil && x.Linked != nil {
		return *x.Linked
	}
	return false
}

func (x *AccountFlags) GetDebitsMustNotExceedCredits() bool {
	if x != nil && x.DebitsMustNotExceedCredits != nil {
		return *x.DebitsMustNotExceedCredits
	}
	return false
}

func (x *AccountFlags) GetCreditsMustNotExceedDebits() bool {
	if x != nil && x.CreditsMustNotExceedDebits != nil {
		return *x.CreditsMustNotExceedDebits
	}
	return false
}

func (x *AccountFlags) GetHistory() bool {
	if x != nil && x.History != nil {
		return *x.History
	}
	return false
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DebitAccountId  string         `protobuf:"bytes,2,opt,name=debit_account_id,json=debitAccountId,proto3" json:"debit_account_id,omitempty"`
	CreditAccountId string         `protobuf:"bytes,3,opt,name=credit_account_id,json=creditAccountId,proto3" json:"credit_account_id,omitempty"`
	Amount          int64          `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	PendingId       *string        `protobuf:"bytes,5,opt,name=pending_id,json=pendingId,proto3,oneof" json:"pending_id,omitempty"`
	UserData128     string         `protobuf:"bytes,6,opt,name=user_data128,json=userData128,proto3" json:"user_data128,omitempty"`
	UserData64      uint64         `protobuf:"varint,7,opt,name=user_data64,json=userData64,proto3" json:"user_data64,omitempty"`
	UserData32      uint32         `protobuf:"varint,8,opt,name=user_data32,json=userData32,proto3" json:"user_data32,omitempty"`
	Ledger          uint32         `protobuf:"varint,9,opt,name=ledger,proto3" json:"ledger,omitempty"`
	Code            uint32         `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	TransferFlags   *TransferFlags `protobuf:"bytes,11,opt,name=transfer_flags,json=transferFlags,proto3" json:"transfer_flags,omitempty"`
	Timestamp       *uint64        `protobuf:"varint,13,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{18}
}

func (x *Transfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transfer) GetDebitAccountId() string {
	if x != nil {
		return x.DebitAccountId
	}
	return ""
}

func (x *Transfer) GetCreditAccountId() string {
	if x != nil {
		return x.CreditAccountId
	}
	return ""
}

func (x *Transfer) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetPendingId() string {
	if x != nil && x.PendingId != nil {
		return *x.PendingId
	}
	return ""
}

func (x *Transfer) GetUserData128() string {
	if x != nil {
		return x.UserData128
	}
	return ""
}

func (x *Transfer) GetUserData64() uint64 {
	if x != nil {
		return x.UserData64
	}
	return 0
}

func (x *Transfer) GetUserData32() uint32 {
	if x != nil {
		return x.UserData32
	}
	return 0
}

func (x *Transfer) GetLedger() uint32 {
	if x != nil {
		return x.Ledger
	}
	return 0
}

func (x *Transfer) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Transfer) GetTransferFlags() *TransferFlags {
	if x != nil {
		return x.TransferFlags
	}
	return nil
}

func (x *Transfer) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type TransferFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Linked              *bool `protobuf:"varint,1,opt,name=linked,proto3,oneof" json:"linked,omitempty"`
	Pending             *bool `protobuf:"varint,2,opt,name=pending,proto3,oneof" json:"pending,omitempty"`
	PostPendingTransfer *bool `protobuf:"varint,3,opt,name=post_pending_transfer,json=postPendingTransfer,proto3,oneof" json:"post_pending_transfer,omitempty"`
	VoidPendingTransfer *bool `protobuf:"varint,4,opt,name=void_pending_transfer,json=voidPendingTransfer,proto3,oneof" json:"void_pending_transfer,omitempty"`
	BalancingDebit      *bool `protobuf:"varint,5,opt,name=balancing_debit,json=balancingDebit,proto3,oneof" json:"balancing_debit,omitempty"`
	BalancingCredit     *bool `protobuf:"varint,6,opt,name=balancing_credit,json=balancingCredit,proto3,oneof" json:"balancing_credit,omitempty"`
}

func (x *TransferFlags) Reset() {
	*x = TransferFlags{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFlags) ProtoMessage() {}

func (x *TransferFlags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFlags.ProtoReflect.Descriptor instead.
func (*TransferFlags) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{19}
}

func (x *TransferFlags) GetLinked() bool {
	if x != nil && x.Linked != nil {
		return *x.Linked
	}
	return false
}

func (x *TransferFlags) GetPending() bool {
	if x != nil && x.Pending != nil {
		return *x.Pending
	}
	return false
}

func (x *TransferFlags) GetPostPendingTransfer() bool {
	if x != nil && x.PostPendingTransfer != nil {
		return *x.PostPendingTransfer
	}
	return false
}

func (x *TransferFlags) GetVoidPendingTransfer() bool {
	if x != nil && x.VoidPendingTransfer != nil {
		return *x.VoidPendingTransfer
	}
	return false
}

func (x *TransferFlags) GetBalancingDebit() bool {
	if x != nil && x.BalancingDebit != nil {
		return *x.BalancingDebit
	}
	return false
}

func (x *TransferFlags) GetBalancingCredit() bool {
	if x != nil && x.BalancingCredit != nil {
		return *x.BalancingCredit
	}
	return false
}

type AccountFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string              `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TimestampMin *uint64             `protobuf:"varint,2,opt,name=timestamp_min,json=timestampMin,proto3,oneof" json:"timestamp_min,omitempty"`
	TimestampMax *uint64             `protobuf:"varint,3,opt,name=timestamp_max,json=timestampMax,proto3,oneof" json:"timestamp_max,omitempty"`
	Limit        uint32              `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Flags        *AccountFilterFlags `protobuf:"bytes,5,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
}

func (x *AccountFilter) Reset() {
	*x = AccountFilter{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFilter) ProtoMessage() {}

func (x *AccountFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFilter.ProtoReflect.Descriptor instead.
func (*AccountFilter) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{20}
}

func (x *AccountFilter) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountFilter) GetTimestampMin() uint64 {
	if x != nil && x.TimestampMin != nil {
		return *x.TimestampMin
	}
	return 0
}

func (x *AccountFilter) GetTimestampMax() uint64 {
	if x != nil && x.TimestampMax != nil {
		return *x.TimestampMax
	}
	return 0
}

func (x *AccountFilter) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AccountFilter) GetFlags() *AccountFilterFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

type AccountFilterFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debits   *bool `protobuf:"varint,1,opt,name=debits,proto3,oneof" json:"debits,omitempty"`
	Credits  *bool `protobuf:"varint,2,opt,name=credits,proto3,oneof" json:"credits,omitempty"`
	Reversed *bool `protobuf:"varint,3,opt,name=reversed,proto3,oneof" json:"reversed,omitempty"`
}

func (x *AccountFilterFlags) Reset() {
	*x = AccountFilterFlags{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountFilterFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFilterFlags) ProtoMessage() {}

func (x *AccountFilterFlags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFilterFlags.ProtoReflect.Descriptor instead.
func (*AccountFilterFlags) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{21}
}

func (x *AccountFilterFlags) GetDebits() bool {
	if x != nil && x.Debits != nil {
		return *x.Debits
	}
	return false
}

func (x *AccountFilterFlags) GetCredits() bool {
	if x != nil && x.Credits != nil {
		return *x.Credits
	}
	return false
}

func (x *AccountFilterFlags) GetReversed() bool {
	if x != nil && x.Reversed != nil {
		return *x.Reversed
	}
	return false
}

type AccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebitsPending  uint64 `protobuf:"varint,1,opt,name=debits_pending,json=debitsPending,proto3" json:"debits_pending,omitempty"`
	DebitsPosted   uint64 `protobuf:"varint,2,opt,name=debits_posted,json=debitsPosted,proto3" json:"debits_posted,omitempty"`
	CreditsPending uint64 `protobuf:"varint,3,opt,name=credits_pending,json=creditsPending,proto3" json:"credits_pending,omitempty"`
	CreditsPosted  uint64 `protobuf:"varint,4,opt,name=credits_posted,json=creditsPosted,proto3" json:"credits_posted,omitempty"`
	Timestamp      uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AccountBalance) Reset() {
	*x = AccountBalance{}
	mi := &file_proto_tigerbeetle_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalance) ProtoMessage() {}

func (x *AccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tigerbeetle_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalance.ProtoReflect.Descriptor instead.
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return file_proto_tigerbeetle_proto_rawDescGZIP(), []int{22}
}

func (x *AccountBalance) GetDebitsPending() uint64 {
	if x != nil {
		return x.DebitsPending
	}
	return 0
}

func (x *AccountBalance) GetDebitsPosted() uint64 {
	if x != nil {
		return x.DebitsPosted
	}
	return 0
}

func (x *AccountBalance) GetCreditsPending() uint64 {
	if x != nil {
		return x.CreditsPending
	}
	return 0
}

func (x *AccountBalance) GetCreditsPosted() uint64 {
	if x != nil {
		return x.CreditsPosted
	}
	return 0
}

func (x *AccountBalance) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_tigerbeetle_proto protoreflect.FileDescriptor

var file_proto_tigerbeetle_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x62, 0x65, 0x65,
	0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x63, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x22, 0x51, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x15,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x16, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x8f, 0x03, 0x0a,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x32, 0x38, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x31, 0x32, 0x38, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb9,
	0x02, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x1a, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x4d, 0x75,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x1a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x44, 0x65, 0x62, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x73, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xba, 0x03, 0x0a, 0x08, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x31, 0x32, 0x38, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x31, 0x32, 0x38, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x36, 0x34, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8f, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x76, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x13, 0x76, 0x6f, 0x69, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x76, 0x6f, 0x69, 0x64, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x48, 0x02,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x06, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x22, 0xca, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0xbb, 0x07,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x6e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x75,
	0x73, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x18, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42,
	0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x49, 0x6e, 0x74,
	0x4d, 0x61, 0x78, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x31, 0x32, 0x38, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x36, 0x34, 0x10, 0x11, 0x12,
	0x28, 0x0a, 0x24, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x33, 0x32, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x10, 0x13, 0x12,
	0x22, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x72, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x09,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72,
	0x6f, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x73, 0x74,
	0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4d, 0x75, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x0e, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x75, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x1a, 0x2a, 0x98, 0x15, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x70, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x38, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x39, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x03, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x3a, 0x12, 0x30, 0x0a,
	0x2c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x3b, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65,
	0x5a, 0x65, 0x72, 0x6f, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x49, 0x6e, 0x74,
	0x4d, 0x61, 0x78, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x10, 0x24, 0x12, 0x28, 0x0a, 0x24, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x10, 0x28, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x2c, 0x12, 0x2d, 0x0a,
	0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x10, 0x25, 0x12, 0x2e, 0x0a, 0x2a,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x10, 0x26, 0x12, 0x25, 0x0a, 0x21,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x27, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x31, 0x32, 0x38, 0x10, 0x29, 0x12,
	0x29, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x36, 0x34, 0x10, 0x2a, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x33, 0x32, 0x10, 0x2b, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x10, 0x43, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x10,
	0x2d, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x10, 0x2e, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x44, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x41, 0x72, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f,
	0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x42, 0x65, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x10, 0x09, 0x12, 0x28, 0x0a,
	0x24, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42,
	0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x49, 0x6e, 0x74, 0x4d, 0x61,
	0x78, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x4d, 0x75, 0x73,
	0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x4d, 0x75,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x0e, 0x12, 0x24, 0x0a,
	0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x49, 0x6e, 0x74, 0x4d, 0x61,
	0x78, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x11, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x40, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72,
	0x6f, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x5a, 0x65,
	0x72, 0x6f, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72,
	0x6f, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4d, 0x75, 0x73, 0x74,
	0x48, 0x61, 0x76, 0x65, 0x54, 0x68, 0x65, 0x53, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x10, 0x17, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x74, 0x48, 0x61, 0x76, 0x65, 0x54,
	0x68, 0x65, 0x53, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x41, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x19, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x1a, 0x12, 0x35, 0x0a, 0x31, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x10, 0x1b, 0x12, 0x36, 0x0a, 0x32, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x61, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x10, 0x1c, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x10, 0x1d, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x1e, 0x12,
	0x28, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x1f, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x48, 0x61, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x20, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x10, 0x21, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x56, 0x6f, 0x69, 0x64, 0x65, 0x64, 0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x23,
	0x12, 0x30, 0x0a, 0x2c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x10, 0x3c, 0x12, 0x3a, 0x0a, 0x36, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3d, 0x12, 0x3b,
	0x0a, 0x37, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3e, 0x12, 0x2a, 0x0a, 0x26, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x73, 0x74, 0x42,
	0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x3f, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x41, 0x12, 0x26,
	0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x10, 0x42, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x2f, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x30, 0x12,
	0x21, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x62, 0x69, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x10, 0x31, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x73, 0x10, 0x33, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x10,
	0x34, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x35, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x10, 0x36, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x73, 0x10, 0x37, 0x32, 0xb5, 0x04, 0x0a, 0x0b, 0x54, 0x69, 0x67, 0x65, 0x72,
	0x42, 0x65, 0x65, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x4f,
	0x0a, 0x21, 0x6e, 0x6c, 0x2e, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x2e, 0x74, 0x69, 0x67,
	0x65, 0x72, 0x62, 0x65, 0x65, 0x74, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x10, 0x54, 0x69, 0x67, 0x65, 0x72, 0x42, 0x65, 0x65, 0x74, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x16, 0x74, 0x69, 0x67, 0x65, 0x72, 0x62, 0x65,
	0x65, 0x74, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tigerbeetle_proto_rawDescOnce sync.Once
	file_proto_tigerbeetle_proto_rawDescData = file_proto_tigerbeetle_proto_rawDesc
)

func file_proto_tigerbeetle_proto_rawDescGZIP() []byte {
	file_proto_tigerbeetle_proto_rawDescOnce.Do(func() {
		file_proto_tigerbeetle_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tigerbeetle_proto_rawDescData)
	})
	return file_proto_tigerbeetle_proto_rawDescData
}

var file_proto_tigerbeetle_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_tigerbeetle_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_tigerbeetle_proto_goTypes = []any{
	(CreateAccountResult)(0),           // 0: proto.CreateAccountResult
	(CreateTransferResult)(0),          // 1: proto.CreateTransferResult
	(*GetIDRequest)(nil),               // 2: proto.GetIDRequest
	(*GetIDReply)(nil),                 // 3: proto.GetIDReply
	(*CreateAccountsRequest)(nil),      // 4: proto.CreateAccountsRequest
	(*CreateAccountsReply)(nil),        // 5: proto.CreateAccountsReply
	(*CreateAccountsReplyItem)(nil),    // 6: proto.CreateAccountsReplyItem
	(*CreateTransfersRequest)(nil),     // 7: proto.CreateTransfersRequest
	(*CreateTransfersReply)(nil),       // 8: proto.CreateTransfersReply
	(*CreateTransfersReplyItem)(nil),   // 9: proto.CreateTransfersReplyItem
	(*LookupAccountsRequest)(nil),      // 10: proto.LookupAccountsRequest
	(*LookupAccountsReply)(nil),        // 11: proto.LookupAccountsReply
	(*LookupTransfersRequest)(nil),     // 12: proto.LookupTransfersRequest
	(*LookupTransfersReply)(nil),       // 13: proto.LookupTransfersReply
	(*GetAccountTransfersRequest)(nil), // 14: proto.GetAccountTransfersRequest
	(*GetAccountTransfersReply)(nil),   // 15: proto.GetAccountTransfersReply
	(*GetAccountBalancesRequest)(nil),  // 16: proto.GetAccountBalancesRequest
	(*GetAccountBalancesReply)(nil),    // 17: proto.GetAccountBalancesReply
	(*Account)(nil),                    // 18: proto.Account
	(*AccountFlags)(nil),               // 19: proto.AccountFlags
	(*Transfer)(nil),                   // 20: proto.Transfer
	(*TransferFlags)(nil),              // 21: proto.TransferFlags
	(*AccountFilter)(nil),              // 22: proto.AccountFilter
	(*AccountFilterFlags)(nil),         // 23: proto.AccountFilterFlags
	(*AccountBalance)(nil),             // 24: proto.AccountBalance
}
var file_proto_tigerbeetle_proto_depIdxs = []int32{
	18, // 0: proto.CreateAccountsRequest.accounts:type_name -> proto.Account
	6,  // 1: proto.CreateAccountsReply.results:type_name -> proto.CreateAccountsReplyItem
	0,  // 2: proto.CreateAccountsReplyItem.result:type_name -> proto.CreateAccountResult
	20, // 3: proto.CreateTransfersRequest.transfers:type_name -> proto.Transfer
	9,  // 4: proto.CreateTransfersReply.results:type_name -> proto.CreateTransfersReplyItem
	1,  // 5: proto.CreateTransfersReplyItem.result:type_name -> proto.CreateTransferResult
	18, // 6: proto.LookupAccountsReply.accounts:type_name -> proto.Account
	20, // 7: proto.LookupTransfersReply.transfers:type_name -> proto.Transfer
	22, // 8: proto.GetAccountTransfersRequest.filter:type_name -> proto.AccountFilter
	20, // 9: proto.GetAccountTransfersReply.transfers:type_name -> proto.Transfer
	22, // 10: proto.GetAccountBalancesRequest.filter:type_name -> proto.AccountFilter
	24, // 11: proto.GetAccountBalancesReply.account_balances:type_name -> proto.AccountBalance
	19, // 12: proto.Account.flags:type_name -> proto.AccountFlags
	21, // 13: proto.Transfer.transfer_flags:type_name -> proto.TransferFlags
	23, // 14: proto.AccountFilter.flags:type_name -> proto.AccountFilterFlags
	2,  // 15: proto.TigerBeetle.GetID:input_type -> proto.GetIDRequest
	4,  // 16: proto.TigerBeetle.CreateAccounts:input_type -> proto.CreateAccountsRequest
	7,  // 17: proto.TigerBeetle.CreateTransfers:input_type -> proto.CreateTransfersRequest
	10, // 18: proto.TigerBeetle.LookupAccounts:input_type -> proto.LookupAccountsRequest
	12, // 19: proto.TigerBeetle.LookupTransfers:input_type -> proto.LookupTransfersRequest
	14, // 20: proto.TigerBeetle.GetAccountTransfers:input_type -> proto.GetAccountTransfersRequest
	16, // 21: proto.TigerBeetle.GetAccountBalances:input_type -> proto.GetAccountBalancesRequest
	3,  // 22: proto.TigerBeetle.GetID:output_type -> proto.GetIDReply
	5,  // 23: proto.TigerBeetle.CreateAccounts:output_type -> proto.CreateAccountsReply
	8,  // 24: proto.TigerBeetle.CreateTransfers:output_type -> proto.CreateTransfersReply
	11, // 25: proto.TigerBeetle.LookupAccounts:output_type -> proto.LookupAccountsReply
	13, // 26: proto.TigerBeetle.LookupTransfers:output_type -> proto.LookupTransfersReply
	15, // 27: proto.TigerBeetle.GetAccountTransfers:output_type -> proto.GetAccountTransfersReply
	17, // 28: proto.TigerBeetle.GetAccountBalances:output_type -> proto.GetAccountBalancesReply
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_tigerbeetle_proto_init() }
func file_proto_tigerbeetle_proto_init() {
	if File_proto_tigerbeetle_proto != nil {
		return
	}
	file_proto_tigerbeetle_proto_msgTypes[17].OneofWrappers = []any{}
	file_proto_tigerbeetle_proto_msgTypes[18].OneofWrappers = []any{}
	file_proto_tigerbeetle_proto_msgTypes[19].OneofWrappers = []any{}
	file_proto_tigerbeetle_proto_msgTypes[20].OneofWrappers = []any{}
	file_proto_tigerbeetle_proto_msgTypes[21].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tigerbeetle_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_tigerbeetle_proto_goTypes,
		DependencyIndexes: file_proto_tigerbeetle_proto_depIdxs,
		EnumInfos:         file_proto_tigerbeetle_proto_enumTypes,
		MessageInfos:      file_proto_tigerbeetle_proto_msgTypes,
	}.Build()
	File_proto_tigerbeetle_proto = out.File
	file_proto_tigerbeetle_proto_rawDesc = nil
	file_proto_tigerbeetle_proto_goTypes = nil
	file_proto_tigerbeetle_proto_depIdxs = nil
}
