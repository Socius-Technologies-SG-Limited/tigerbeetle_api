name: Publish-Docker

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (e.g., v1.0.0 or latest)'
        required: false
        default: 'latest'
      branch:
        description: 'Branch to build from'
        required: false
        default: 'main'

permissions:
  contents: read
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
        # Lint the code with gofmt
      - name: Lint with gofmt
        run: test -z "$(gofmt -l .)"
        # Build the Go application
      - name: Build the application
        run: make build
  build-binaries:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      # Set up Go environment  
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      # Set up Zig for cross-compilation
      - name: Set up Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0
      # Add version file
      - name: Add version file
        run: printf %s "${{ github.sha }}" > config/VERSION.txt
      # Build binaries for multiple platforms
      - name: Build Linux AMD64
        run: make release-linux-amd64-cross-compile
      - name: Build Linux ARM64
        run: make release-linux-arm64-cross-compile
      - name: Build Darwin ARM64
        run: make release-darwin-arm64
      # Upload binaries as artifacts
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: tigerbeetle-api-binaries
          path: build/
          retention-days: 30
      # Create GitHub Release if triggered by tag
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/tigerbeetle_api_linux_amd64
            build/tigerbeetle_api_linux_arm64
            build/tigerbeetle_api_darwin_arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # GitHub automatically provides a GITHUB_TOKEN secret to authenticate
          password: ${{ secrets.GITHUB_TOKEN }}
        # Setup env for building docker images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Add version file
        run: printf %s "${{ github.sha }}" > config/VERSION.txt
        # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # Set to true to push the image to the registry
          push: true
          # Define the tags for the image
          tags: |
            ghcr.io/${{ github.repository_owner }}/tigerbeetle_api:latest
            ghcr.io/${{ github.repository_owner }}/tigerbeetle_api:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
        # (Optional) Display Docker image details
      - name: Show Docker images
        run: docker images